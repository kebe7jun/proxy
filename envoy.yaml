static_resources:
  listeners:
  - address:
      socket_address:
        address: 10.64.25.25
        port_value: 20880
    traffic_direction: INBOUND
    filter_chains:
    - filter_chain_match:
        source_ports: 
        - 12345
        - 12346
      filters:
        name: envoy.filters.network.tcp_proxy
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
          stat_prefix: destination
          cluster: provider_service
    - filters:
      - name: envoy.filters.network.dubbo_proxy
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.dubbo_proxy.v3.DubboProxy
          stat_prefix: kebe_stats
          protocol_type: Dubbo
          serialization_type: Hessian2
          route_config:
          - name: local_route
            interface: '*'
            routes:
            - match:
                method:
                  name:
                    exact: sayHello
              route:
                cluster: provider_service
            # - route:
            #     cluster: dubbo_service
          dubbo_filters:
          - name: envoy.filters.dubbo.wasm
            config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
              config:
                vm_config:
                  runtime: envoy.wasm.runtime.null
                  code:
                    local: { inline_string: "envoy.wasm.metadata_exchange" }
                configuration: 
                  "@type": "type.googleapis.com/envoy.tcp.metadataexchange.config.MetadataExchange"

          # - name: envoy.filters.dubbo.wasm
          #   config:
          #     "@type": type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
          #     config:
          #       name: "base"
          #       root_id: "base"
          #       # if your wasm filter requires custom configuration you can add
          #       # as follows
          #       configuration:
          #         "@type": "type.googleapis.com/google.protobuf.StringValue"
          #         value: |
          #           {}
          #       vm_config:
          #         runtime: "envoy.wasm.runtime.v8"
          #         vm_id: "base"
          #         code:
          #           local:
          #             filename: "/tmp/base.wasm"
          # - name: envoy.filters.dubbo.wasm
          #   config:
          #     "@type": type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
          #     config:
          #       name: "test"
          #       root_id: "test"
          #       # if your wasm filter requires custom configuration you can add
          #       # as follows
          #       configuration:
          #         "@type": "type.googleapis.com/google.protobuf.StringValue"
          #         value: |
          #           {}
          #       vm_config:
          #         runtime: "envoy.wasm.runtime.v8"
          #         vm_id: "test"
          #         code:
          #           local:
          #             filename: "/tmp/test.wasm"
          # - name: envoy.filters.dubbo.wasm
          #   config:
          #     "@type": type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
          #     config:
          #       name: "base2"
          #       root_id: "base2"
          #       # if your wasm filter requires custom configuration you can add
          #       # as follows
          #       configuration:
          #         "@type": "type.googleapis.com/google.protobuf.StringValue"
          #         value: |
          #           {}
          #       vm_config:
          #         runtime: "envoy.wasm.runtime.v8"
          #         vm_id: "base2"
          #         environment_variables:
          #           host_env_keys:
          #           - PATH
          #           - HOSTNAME
          #         code:
          #           local:
          #             filename: "/tmp/base.wasm"
          - name: envoy.filters.dubbo.router

          # - name: envoy.filters.dubbo.echo2
          #   config:
          #     "@type": type.googleapis.com/google.protobuf.Struct
          #     value:
          #       name: test_service
          # - name: envoy.filters.network.wasm
            # config:
            #   "@type": type.googleapis.com/envoy.extensions.filters.network.wasm.v3.Wasm
            #   config:
            #     config:
            #       name: "my_plugin"
            #       vm_config:
            #         runtime: "envoy.wasm.runtime.v8"
            #         code:
            #           local:
            #             filename: "examples/wasm-cc/lib/envoy_filter_http_wasm_example.wasm"
            #         allow_precompiled: true

  clusters:
  - name: provider_service
    type: strict_dns
    lb_policy: round_robin
    load_assignment:
      cluster_name: service1
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 10.31.100.11
                port_value: 36615


admin:
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 9901
# static_resources:
#   listeners:
#   - name: listener_0
#     address:
#       socket_address:
#         protocol: TCP
#         address: 0.0.0.0
#         port_value: 10000
#     filter_chains:
#     - filters:
#       - name: envoy.filters.network.http_connection_manager
#         typed_config:
#           "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
#           stat_prefix: ingress_http
#           route_config:
#             name: local_route
#             virtual_hosts:
#             - name: local_service
#               domains: ["*"]
#               routes:
#               - match:
#                   prefix: "/force-host-rewrite"
#                 route:
#                   cluster: dynamic_forward_proxy_cluster
#                 typed_per_filter_config:
#                   envoy.filters.http.dynamic_forward_proxy:
#                     "@type": type.googleapis.com/envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig
#                     host_rewrite_literal: www.example.org
#               - match:
#                   prefix: "/"
#                 route:
#                   cluster: dynamic_forward_proxy_cluster
#           http_filters:
#           - name: envoy.filters.http.dynamic_forward_proxy
#             typed_config:
#               "@type": type.googleapis.com/envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig
#               dns_cache_config:
#                 name: dynamic_forward_proxy_cache_config
#                 dns_lookup_family: V4_ONLY
#                 dns_resolution_config:
#                   resolvers:
#                   - socket_address:
#                       address: "192.168.1.29"
#                       port_value: 53
#                   dns_resolver_options:
#                     use_tcp_for_dns_lookups: true
#                     no_default_search_domain: true
#           - name: envoy.filters.http.router
#             typed_config:
#               "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
#   clusters:
#   - name: dynamic_forward_proxy_cluster
#     lb_policy: CLUSTER_PROVIDED
#     cluster_type:
#       name: envoy.clusters.dynamic_forward_proxy
#       typed_config:
#         "@type": type.googleapis.com/envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig
#         dns_cache_config:
#           name: dynamic_forward_proxy_cache_config
#           dns_lookup_family: V4_ONLY
#           dns_resolution_config:
#             resolvers:
#             - socket_address:
#                 address: "192.168.1.29"
#                 port_value: 53
#             dns_resolver_options:
#               use_tcp_for_dns_lookups: true
#               no_default_search_domain: true
#     transport_socket:
#       name: envoy.transport_sockets.tls
#       typed_config:
#         "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
#         common_tls_context:
#           validation_context:
#             trusted_ca: {filename: /etc/ssl/certs/ca-certificates.crt}

